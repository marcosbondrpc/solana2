version: '3.9'

services:
  # ClickHouse for time-series data storage
  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: mev-clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native protocol
    volumes:
      - ./data/clickhouse:/var/lib/clickhouse
      - ./clickhouse/ddl.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml:ro
    environment:
      CLICKHOUSE_DB: mev
      CLICKHOUSE_USER: mev_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-mev_secure_password}
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redpanda (Kafka-compatible) for message streaming
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: mev-redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp 2
      - --memory 2G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - "19092:19092"  # Kafka API
      - "18082:18082"  # HTTP Proxy
      - "18081:18081"  # Schema Registry
      - "9644:9644"    # Prometheus metrics
    volumes:
      - ./data/redpanda:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mev-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - api
      - redpanda

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mev-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clickhouse-datasource
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/mev-overview.json
    restart: unless-stopped
    depends_on:
      - prometheus
      - clickhouse

  # Tempo for distributed tracing (optional)
  tempo:
    image: grafana/tempo:latest
    container_name: mev-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml:ro
      - ./data/tempo:/tmp/tempo
    ports:
      - "14268:14268"  # Jaeger ingest
      - "3200:3200"    # Tempo
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    restart: unless-stopped

  # FastAPI backend
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: mev-api
    ports:
      - "8000:8000"
    environment:
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_DB: mev
      CLICKHOUSE_USER: mev_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-mev_secure_password}
      KAFKA_BROKERS: redpanda:9092
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      REDIS_URL: redis://redis:6390
      PROMETHEUS_MULTIPROC_DIR: /tmp
      LOG_LEVEL: info
    volumes:
      - ../models:/app/models
      - ../exports:/app/exports
      - ./api/logs:/app/logs
    depends_on:
      - clickhouse
      - redpanda
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend (Vite development server or nginx for production)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: mev-frontend
    ports:
      - "5173:80"
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mev-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mev-node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

networks:
  default:
    name: mev-network
    driver: bridge

volumes:
  clickhouse-data:
  redpanda-data:
  prometheus-data:
  grafana-data:
  tempo-data:
  redis-data: