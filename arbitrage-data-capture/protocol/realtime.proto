syntax = "proto3";

package solana.mev.realtime;

// Ultra-optimized message envelope for 100k+ msg/sec throughput
message Envelope {
  uint64 timestamp_ns = 1;  // Nanosecond precision timestamp
  string stream_id = 2;      // Stream identifier for multiplexing
  uint32 sequence = 3;       // Sequence number for ordering
  bytes payload = 4;         // Raw payload (can be nested proto)
  string type = 5;           // Message type discriminator
}

// Micro-batched container for extreme throughput
message Batch {
  repeated Envelope envelopes = 1;
  uint64 batch_id = 2;
  uint32 compression_type = 3; // 0=none, 1=zstd, 2=lz4, 3=snappy
  uint32 batch_size = 4;
  uint64 created_at_ns = 5;
}

// MEV Opportunity data
message MevOpportunity {
  string tx_hash = 1;
  string block_hash = 2;
  uint64 slot = 3;
  double profit_lamports = 4;
  double probability = 5;
  string opportunity_type = 6;
  repeated string target_accounts = 7;
  uint64 gas_estimate = 8;
  uint64 priority_fee = 9;
  bytes raw_transaction = 10;
  map<string, double> metrics = 11;
}

// Arbitrage Opportunity
message ArbitrageOpportunity {
  string id = 1;
  uint64 slot = 2;
  repeated string dex_markets = 3;
  double profit_estimate = 4;
  double execution_probability = 5;
  uint64 gas_cost = 6;
  repeated RouteStep route = 7;
  map<string, double> risk_metrics = 8;
  uint64 deadline_ns = 9;
}

message RouteStep {
  string dex = 1;
  string pool_address = 2;
  string token_in = 3;
  string token_out = 4;
  uint64 amount_in = 5;
  uint64 amount_out = 6;
  double slippage = 7;
}

// Bundle execution outcome
message BundleOutcome {
  string bundle_id = 1;
  uint64 slot = 2;
  bool landed = 3;
  double profit_actual = 4;
  uint64 gas_used = 5;
  string error = 6;
  uint64 latency_ms = 7;
  map<string, string> metadata = 8;
}

// Performance metrics update
message MetricsUpdate {
  uint64 timestamp_ns = 1;
  map<string, double> gauges = 2;     // Current values
  map<string, uint64> counters = 3;   // Cumulative counts
  map<string, Histogram> histograms = 4;
}

message Histogram {
  repeated double buckets = 1;
  repeated uint64 counts = 2;
  double sum = 3;
  uint64 count = 4;
  double min = 5;
  double max = 6;
  double p50 = 7;
  double p95 = 8;
  double p99 = 9;
}

// Market data tick
message MarketTick {
  string market_id = 1;
  uint64 timestamp_ns = 2;
  double bid_price = 3;
  double ask_price = 4;
  double bid_size = 5;
  double ask_size = 6;
  double last_price = 7;
  uint64 volume_24h = 8;
  map<string, double> additional_data = 9;
}

// Control response message
message ControlResponse {
  string command_id = 1;
  bool success = 2;
  string message = 3;
  map<string, string> data = 4;
}