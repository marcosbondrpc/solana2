#!/bin/bash

# MEV Infrastructure Control Script
# Central command interface for all operations

PROJECT_DIR="/home/kidgordones/0solana/node"
SCRIPTS_DIR="$PROJECT_DIR/scripts"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to show help
show_help() {
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║           🚀 MEV INFRASTRUCTURE CONTROL                      ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo ""
    echo "Usage: ./mev-control [command] [options]"
    echo ""
    echo "SYNC COMMANDS:"
    echo "  sync-status        Show GitHub sync status"
    echo "  sync-push          Push changes to GitHub immediately"
    echo "  sync-pull          Pull changes from GitHub immediately"
    echo "  sync-ensure        Ensure sync is working properly"
    echo ""
    echo "SERVICE COMMANDS:"
    echo "  services-status    Show all service statuses"
    echo "  services-restart   Restart all services"
    echo "  frontend-restart   Restart frontend only"
    echo "  backend-restart    Restart backend only"
    echo ""
    echo "MONITORING COMMANDS:"
    echo "  monitor            Show real-time system monitoring"
    echo "  test-system        Run comprehensive system test"
    echo "  verify-setup       Verify complete setup"
    echo ""
    echo "DOCKER COMMANDS:"
    echo "  docker-status      Show Docker container status"
    echo "  docker-restart     Restart all Docker containers"
    echo "  docker-logs        Show Docker logs"
    echo ""
    echo "SETUP COMMANDS:"
    echo "  setup-sync         Setup GitHub sync from scratch"
    echo "  setup-services     Setup systemd services"
    echo ""
    echo "SHORTCUTS:"
    echo "  status             Show complete system status"
    echo "  restart            Restart everything"
    echo "  logs               Show all logs"
    echo ""
}

# Main command processing
case "$1" in
    # Sync commands
    sync-status)
        $SCRIPTS_DIR/monitoring/monitor-sync.sh
        ;;
    sync-push)
        $SCRIPTS_DIR/sync/auto-commit.sh
        ;;
    sync-pull)
        $SCRIPTS_DIR/sync/github-pull-sync.sh
        ;;
    sync-ensure)
        $SCRIPTS_DIR/sync/ensure-sync.sh
        ;;
    
    # Service commands
    services-status)
        print_color "$BLUE" "📊 Service Status:"
        echo ""
        netstat -tulpn 2>/dev/null | grep -E ":(3001|8000)" | while read line; do
            if echo "$line" | grep -q ":3001"; then
                print_color "$GREEN" "  ✅ Frontend: Running on port 3001"
            elif echo "$line" | grep -q ":8000"; then
                print_color "$GREEN" "  ✅ Backend: Running on port 8000"
            fi
        done
        echo ""
        sudo systemctl status mev-services --no-pager | head -10
        ;;
    services-restart)
        print_color "$YELLOW" "🔄 Restarting all services..."
        sudo systemctl restart mev-services
        sleep 3
        $0 services-status
        ;;
    frontend-restart)
        print_color "$YELLOW" "🔄 Restarting frontend..."
        pkill -f "vite" 2>/dev/null || true
        cd $PROJECT_DIR/frontend/apps/dashboard
        nohup npm run dev > /tmp/frontend.log 2>&1 &
        sleep 3
        print_color "$GREEN" "✅ Frontend restarted"
        ;;
    backend-restart)
        print_color "$YELLOW" "🔄 Restarting backend..."
        pkill -f "python3.*main.py" 2>/dev/null || true
        cd $PROJECT_DIR/backend/services/control-plane
        nohup python3 main.py > /tmp/backend.log 2>&1 &
        sleep 3
        print_color "$GREEN" "✅ Backend restarted"
        ;;
    
    # Monitoring commands
    monitor)
        $SCRIPTS_DIR/monitoring/monitor-sync.sh
        ;;
    test-system)
        if [ -f "$SCRIPTS_DIR/monitoring/test-system.sh" ]; then
            $SCRIPTS_DIR/monitoring/test-system.sh
        else
            print_color "$RED" "Test script not found"
        fi
        ;;
    verify-setup)
        if [ -f "$SCRIPTS_DIR/monitoring/verify-setup.sh" ]; then
            $SCRIPTS_DIR/monitoring/verify-setup.sh
        else
            print_color "$RED" "Verify script not found"
        fi
        ;;
    
    # Docker commands
    docker-status)
        print_color "$BLUE" "🐳 Docker Status:"
        sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        ;;
    docker-restart)
        print_color "$YELLOW" "🔄 Restarting Docker containers..."
        cd $PROJECT_DIR/arbitrage-data-capture
        sudo docker compose restart
        ;;
    docker-logs)
        sudo docker compose logs --tail=50
        ;;
    
    # Setup commands
    setup-sync)
        $SCRIPTS_DIR/setup/setup-cron-sync.sh
        ;;
    setup-services)
        $SCRIPTS_DIR/setup/setup-github-sync-service.sh
        ;;
    
    # Shortcuts
    status)
        echo "╔══════════════════════════════════════════════════════════════╗"
        echo "║              📊 COMPLETE SYSTEM STATUS                       ║"
        echo "╚══════════════════════════════════════════════════════════════╝"
        echo ""
        $0 services-status
        echo ""
        $0 docker-status
        echo ""
        $0 sync-status
        ;;
    restart)
        print_color "$YELLOW" "🔄 Restarting everything..."
        $0 services-restart
        $0 docker-restart
        ;;
    logs)
        print_color "$BLUE" "📝 Recent Logs:"
        echo ""
        echo "Frontend log (last 10 lines):"
        tail -10 /tmp/frontend.log 2>/dev/null || echo "  No frontend logs"
        echo ""
        echo "Backend log (last 10 lines):"
        tail -10 /tmp/backend.log 2>/dev/null || echo "  No backend logs"
        echo ""
        echo "Sync log (last 10 lines):"
        tail -10 $PROJECT_DIR/sync.log 2>/dev/null || echo "  No sync logs"
        ;;
    
    # Help and default
    help|--help|-h|"")
        show_help
        ;;
    *)
        print_color "$RED" "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac