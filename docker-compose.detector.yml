version: '3.9'

# MEV Detection System - DEFENSIVE ONLY
# Pure observation and analysis infrastructure

services:
  # ShredStream Ingestion Service
  shred-ingest:
    build:
      context: ./services/shred-ingest
      dockerfile: Dockerfile
    container_name: shred-ingest
    ports:
      - "9100:9100"  # Metrics port
    environment:
      - RUST_LOG=info,shred_ingest=debug
      - JITO_SHREDSTREAM_URL=${JITO_SHREDSTREAM_URL:-grpc://mainnet.block-engine.jito.wtf:443}
      - JITO_AUTH_TOKEN=${JITO_AUTH_TOKEN}
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_DATABASE=ch
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-arbitrage123}
      - BATCH_SIZE=1000
      - BATCH_TIMEOUT_MS=100
      - MAX_INFLIGHT=10
      - COMPRESSION=lz4
      - DETECTION_ONLY=true
    depends_on:
      - clickhouse
    networks:
      - solana-backend
    cap_add:
      - NET_ADMIN  # For DSCP marking
      - SYS_NICE   # For CPU affinity
    ulimits:
      nofile:
        soft: 1048576
        hard: 1048576
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '2'
          memory: 1G

  # Sandwich Detection Engine
  sandwich-detector:
    build:
      context: ./services/detector
      dockerfile: Dockerfile
    container_name: sandwich-detector
    ports:
      - "8800:8800"  # API port
      - "9101:9101"  # Metrics port
    environment:
      - RUST_LOG=info,sandwich_detector=debug
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_DATABASE=ch
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-arbitrage123}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - MIN_CONFIDENCE=0.75
      - MAX_SLOT_DISTANCE=3
      - MIN_PRICE_IMPACT=0.001
      - ENABLE_OBFUSCATION_DETECTION=true
      - ENABLE_MULTI_ADDRESS_DETECTION=true
      - DETECTION_ONLY=true
    depends_on:
      - clickhouse
      - redis
    networks:
      - solana-backend
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # Archetype Classification Service
  archetype-classifier:
    build:
      context: ./services/infer
      dockerfile: Dockerfile
    container_name: archetype-classifier
    ports:
      - "8801:8801"  # API port
    environment:
      - PYTHONUNBUFFERED=1
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_DATABASE=ch
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-arbitrage123}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
      - MODEL_PATH=/models
      - DETECTION_ONLY=true
      - LOG_LEVEL=INFO
    volumes:
      - ./services/infer:/app
      - ./models:/models:ro
      - ./docs/secrets:/app/reports
    depends_on:
      - clickhouse
      - redis
    networks:
      - solana-backend
    restart: unless-stopped
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8801 --reload

  # Entity Fleet Detector
  fleet-detector:
    build:
      context: ./services/infer
      dockerfile: Dockerfile
    container_name: fleet-detector
    ports:
      - "8802:8802"
    environment:
      - PYTHONUNBUFFERED=1
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_DATABASE=ch
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-arbitrage123}
      - DETECTION_ONLY=true
      - SERVICE_TYPE=fleet
    volumes:
      - ./services/infer:/app
    depends_on:
      - clickhouse
    networks:
      - solana-backend
    restart: unless-stopped
    command: python fleet_detector.py

  # Detection API Gateway
  detection-api:
    build:
      context: ./services/detector
      dockerfile: Dockerfile.api
    container_name: detection-api
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_HOST=redis
      - SANDWICH_DETECTOR_URL=http://sandwich-detector:8800
      - ARCHETYPE_CLASSIFIER_URL=http://archetype-classifier:8801
      - FLEET_DETECTOR_URL=http://fleet-detector:8802
      - ENABLE_CORS=true
      - DETECTION_ONLY=true
    depends_on:
      - sandwich-detector
      - archetype-classifier
      - fleet-detector
    networks:
      - solana-backend
    restart: unless-stopped

  # Detection Dashboard
  detection-dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
        - NEXT_PUBLIC_WS_URL=ws://localhost:4000/ws
        - NEXT_PUBLIC_DETECTION_ONLY=true
    container_name: detection-dashboard
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - solana-backend
    restart: unless-stopped

  # Grafana with detection dashboards
  grafana-detection:
    image: grafana/grafana:10.4.3
    container_name: grafana-detection
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,redis-app
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/behavioral_spectrum.json
    volumes:
      - grafana-detection-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - clickhouse
      - prometheus
    networks:
      - solana-backend
    restart: unless-stopped

  # Prometheus for detection metrics
  prometheus-detection:
    image: prom/prometheus:v2.54.1
    container_name: prometheus-detection
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus-detection.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-detection-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - solana-backend
    restart: unless-stopped

networks:
  solana-backend:
    external: true

volumes:
  grafana-detection-data:
  prometheus-detection-data: