name: Deploy to Production Server

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:  # Allow manual trigger

env:
  SERVER_HOST: '45.157.234.184'
  SERVER_USER: 'kidgordones'
  SERVER_PATH: '/home/kidgordones/0solana/node'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need HEAD~1 for diff comparison
    
    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "frontend_changed=$(git diff --name-only HEAD~1 HEAD | grep -q 'frontend/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "backend_changed=$(git diff --name-only HEAD~1 HEAD | grep -q 'backend/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        else
          echo "frontend_changed=true" >> $GITHUB_OUTPUT
          echo "backend_changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
    
    - name: Test SSH Connection
      run: |
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            -p 22 \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} \
            "echo 'SSH connection successful'"
    
    - name: Pull Latest Code on Server
      run: |
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            -p 22 \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
        set -e
        cd ${{ env.SERVER_PATH }}
        
        # Stash any local changes
        git stash
        
        # Fetch and reset to origin/main
        git fetch origin
        git reset --hard origin/main
        
        echo "Code updated at $(date)"
        ENDSSH
    
    - name: Restart Frontend Services
      if: steps.changed-files.outputs.frontend_changed == 'true'
      run: |
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            -p 22 \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
        set -e
        cd ${{ env.SERVER_PATH }}
        
        echo "Frontend changes detected, restarting services..."
        
        # Kill existing frontend processes
        pkill -f "vite" 2>/dev/null || true
        sleep 2
        
        # Start frontend
        cd frontend/apps/dashboard
        
        # Install dependencies if package.json changed
        if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
          npm install
        fi
        
        # Start development server in background
        nohup npm run dev > /tmp/frontend.log 2>&1 &
        
        # Wait and verify process started
        sleep 3
        if pgrep -f "vite" > /dev/null; then
          echo "Frontend started successfully"
        else
          echo "Warning: Frontend may not have started correctly"
          tail -20 /tmp/frontend.log
        fi
        ENDSSH
    
    - name: Restart Backend Services
      if: steps.changed-files.outputs.backend_changed == 'true'
      run: |
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            -p 22 \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
        set -e
        cd ${{ env.SERVER_PATH }}
        
        echo "Backend changes detected, restarting services..."
        
        # Kill existing backend processes
        pkill -f "python3.*main.py" 2>/dev/null || true
        sleep 2
        
        # Start backend
        cd backend/services/control-plane
        
        # Install dependencies if requirements changed
        if git diff HEAD~1 HEAD --name-only | grep -q "requirements.txt"; then
          pip3 install -r requirements.txt --user
        fi
        
        # Start backend service in background
        nohup python3 main.py > /tmp/backend.log 2>&1 &
        
        # Wait and verify process started
        sleep 3
        if pgrep -f "python3.*main.py" > /dev/null; then
          echo "Backend started successfully"
        else
          echo "Warning: Backend may not have started correctly"
          tail -20 /tmp/backend.log
        fi
        ENDSSH
    
    - name: Verify Deployment
      if: always()
      run: |
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o LogLevel=ERROR \
            -p 22 \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
        echo "=== Deployment Status ==="
        echo "Current branch: $(cd ${{ env.SERVER_PATH }} && git rev-parse --abbrev-ref HEAD)"
        echo "Latest commit: $(cd ${{ env.SERVER_PATH }} && git log -1 --oneline)"
        echo ""
        echo "=== Running Processes ==="
        echo "Frontend (Vite): $(pgrep -f 'vite' > /dev/null && echo 'RUNNING ✓' || echo 'STOPPED ✗')"
        echo "Backend (Python): $(pgrep -f 'python3.*main.py' > /dev/null && echo 'RUNNING ✓' || echo 'STOPPED ✗')"
        echo ""
        echo "=== System Resources ==="
        echo "Memory Usage: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
        echo "Disk Usage: $(df -h / | tail -1 | awk '{print $3 "/" $2 " (" $5 ")"}')"
        echo ""
        echo "Deployment completed at $(date)"
        ENDSSH
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key