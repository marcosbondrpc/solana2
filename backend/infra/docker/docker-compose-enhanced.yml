version: '3.9'

services:
  # ClickHouse Cluster
  clickhouse-01:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse-01
    hostname: clickhouse-01
    volumes:
      - clickhouse-01-data:/var/lib/clickhouse
      - ./database/schema:/docker-entrypoint-initdb.d
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: arbitrage_mainnet
      CLICKHOUSE_USER: arbitrage_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-strongpassword123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - arbitrage-network

  clickhouse-02:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse-02
    hostname: clickhouse-02
    volumes:
      - clickhouse-02-data:/var/lib/clickhouse
      - ./database/schema:/docker-entrypoint-initdb.d
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
    ports:
      - "8124:8123"
      - "9001:9000"
    environment:
      CLICKHOUSE_DB: arbitrage_mainnet
      CLICKHOUSE_USER: arbitrage_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-strongpassword123}
    networks:
      - arbitrage-network

  clickhouse-03:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse-03
    hostname: clickhouse-03
    volumes:
      - clickhouse-03-data:/var/lib/clickhouse
      - ./database/schema:/docker-entrypoint-initdb.d
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
    ports:
      - "8125:8123"
      - "9002:9000"
    environment:
      CLICKHOUSE_DB: arbitrage_mainnet
      CLICKHOUSE_USER: arbitrage_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-strongpassword123}
    networks:
      - arbitrage-network

  # Kafka Cluster with KRaft
  kafka-1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-1:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29093,2@kafka-2:29093,3@kafka-3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka-1:29092,CONTROLLER://kafka-1:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_COMPRESSION_TYPE: 'lz4'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - arbitrage-network

  kafka-2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "9093:9092"
      - "19093:19092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-2:29092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29093,2@kafka-2:29093,3@kafka-3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka-2:29092,CONTROLLER://kafka-2:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    networks:
      - arbitrage-network

  kafka-3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "9094:9092"
      - "19094:19092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-3:29092,PLAINTEXT_HOST://localhost:9094'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29093,2@kafka-2:29093,3@kafka-3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka-3:29092,CONTROLLER://kafka-3:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    networks:
      - arbitrage-network

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-1:29092,kafka-2:29092,kafka-3:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - arbitrage-network

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - arbitrage-network

  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica
    ports:
      - "6380:6379"
    command: redis-server --replicaof redis-master 6379 --appendonly yes
    volumes:
      - redis-replica-data:/data
    depends_on:
      - redis-master
    networks:
      - arbitrage-network

  # FastAPI Service
  api-service:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: api-service
    ports:
      - "8080:8080"
    environment:
      CLICKHOUSE_HOST: clickhouse-01
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:29092,kafka-2:29092,kafka-3:29092
      REDIS_URL: redis://redis-master:6379
      PYTHONUNBUFFERED: 1
    depends_on:
      - clickhouse-01
      - kafka-1
      - redis-master
    volumes:
      - ./api:/app/api
      - ./models:/app/models
      - ./writer:/app/writer
    networks:
      - arbitrage-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Data Processor
  data-processor:
    build:
      context: .
      dockerfile: processor/Dockerfile
    container_name: data-processor
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:29092,kafka-2:29092,kafka-3:29092
      REDIS_URL: redis://redis-master:6379
      USE_GPU: 'false'
    depends_on:
      - kafka-1
      - redis-master
    volumes:
      - ./processor:/app/processor
      - ./models:/app/models
    networks:
      - arbitrage-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # Streaming Service
  streaming-service:
    build:
      context: .
      dockerfile: streaming/Dockerfile
    container_name: streaming-service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:29092,kafka-2:29092,kafka-3:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - kafka-1
      - schema-registry
    volumes:
      - ./streaming:/app/streaming
    networks:
      - arbitrage-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - arbitrage-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: clickhouse-datasource,redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - clickhouse-01
    networks:
      - arbitrage-network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - arbitrage-network

  # Kafka Exporter
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka-1:29092'
      - '--kafka.server=kafka-2:29092'
      - '--kafka.server=kafka-3:29092'
    depends_on:
      - kafka-1
    networks:
      - arbitrage-network

  # ClickHouse Exporter
  clickhouse-exporter:
    image: f1yegor/clickhouse-exporter:latest
    container_name: clickhouse-exporter
    ports:
      - "9116:9116"
    environment:
      CLICKHOUSE_HOST: clickhouse-01
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: arbitrage_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-strongpassword123}
    depends_on:
      - clickhouse-01
    networks:
      - arbitrage-network

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - arbitrage-network

  # Jupyter Lab for ML Development
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: 'yes'
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:-arbitrage123}
    volumes:
      - ./ml_pipeline:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - arbitrage-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9200:9000"
      - "9201:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - arbitrage-network

networks:
  arbitrage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  clickhouse-01-data:
  clickhouse-02-data:
  clickhouse-03-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  redis-data:
  redis-replica-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  minio-data: