[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mev-backend"
version = "1.0.0"
description = "Ultra-high-performance MEV backend infrastructure"
authors = [
    {name = "MEV Engineering Team", email = "mev@legendary.com"}
]
license = {text = "Proprietary"}
readme = "README.md"
requires-python = ">=3.11"

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "uvloop>=0.19.0",
    "httpx>=0.25.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pynacl>=1.5.0",
    "aiokafka>=0.10.0",
    "kafka-python>=2.0.2",
    "redis>=5.0.0",
    "aioredis>=2.0.1",
    "clickhouse-connect>=0.6.0",
    "clickhouse-driver>=0.2.6",
    "asynch>=0.2.2",
    "protobuf>=4.24.0",
    "grpcio-tools>=1.59.0",
    "zstandard>=0.22.0",
    "lz4>=4.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "pyarrow>=14.0.0",
    "xgboost>=2.0.0",
    "scikit-learn>=1.3.0",
    "treelite>=3.9.0",
    "treelite-runtime>=3.9.0",
    "prometheus-client>=0.19.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
    "psutil>=5.9.0",
    "structlog>=23.2.0",
    "asyncpg>=0.29.0",
    "websockets>=12.0",
    "python-dateutil>=2.8.2",
    "pydantic[email]>=2.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.11.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

performance = [
    "cProfile",
    "py-spy>=0.3.14",
    "memray>=1.10.0",
]

[project.urls]
Homepage = "https://github.com/marcosbondrpc/solana2"
Repository = "https://github.com/marcosbondrpc/solana2"
Documentation = "https://github.com/marcosbondrpc/solana2/docs"

[tool.setuptools]
packages = ["services", "libs", "proto", "ml", "infra", "tools"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | \.mypy_cache
  | \.pytest_cache
  | __pycache__
  | build
  | dist
  | proto/gen
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]
"proto/gen/*.py" = ["E402", "F401", "E501"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
]

[tool.coverage.run]
source = ["services", "libs", "ml"]
omit = [
    "*/tests/*",
    "*/proto/gen/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]