name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  schedule:
    - cron: '0 0 * * 0' # Weekly security scan

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

jobs:
  # Frontend tests and build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Lint
        run: |
          cd frontend
          npm run lint
      
      - name: Type check
        run: |
          cd frontend
          npm run typecheck
      
      - name: Build
        run: |
          cd frontend
          npm run build
      
      - name: Bundle size check
        run: |
          cd frontend
          npx bundlesize --config .bundlesize.json
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/.lighthouserc.json'
          uploadArtifacts: true

  # API tests and build
  api:
    name: API CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black mypy
      
      - name: Lint with black
        run: |
          cd api
          black --check .
      
      - name: Type check with mypy
        run: |
          cd api
          mypy . --ignore-missing-imports
      
      - name: Run tests
        run: |
          cd api
          pytest --cov=. --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          flags: api

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Dependency check
        run: |
          cd frontend && npm audit --audit-level=high
          cd ../api && pip-audit

  # Docker build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [frontend, api]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: mev-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build API Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: false
          tags: mev-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Docker Compose
        run: |
          cd infra
          docker-compose up -d
          sleep 30
          docker-compose ps
      
      - name: Health check
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:5173 || exit 1
      
      - name: Cleanup
        if: always()
        run: |
          cd infra
          docker-compose down -v

  # Performance testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run load test
        run: |
          k6 run scripts/load-test.js --out json=test-results.json
      
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: test-results.json

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.mev-monitor.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/staging/
          # or
          # ssh staging-server 'cd /app && docker-compose pull && docker-compose up -d'
      
      - name: Smoke test
        run: |
          sleep 30
          # curl -f https://staging.mev-monitor.example.com/health

  # Notify on failure
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [frontend, api, security, docker]
    if: failure()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'CI/CD Pipeline failed for ${{ github.repository }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()